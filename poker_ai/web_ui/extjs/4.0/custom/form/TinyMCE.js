Ext.define("EC.common.tinymce.WindowManager", {    extend: tinymce.WindowManager,    constructor: function(cfg) {        tinymce.WindowManager.call(this, cfg.editor);    },    alert: function(txt, cb, s) {        Ext.MessageBox.alert("", txt, function() {            if (!Ext.isEmpty(cb)) {                cb.call(this);            }        }, s);    },    confirm: function(txt, cb, s) {        Ext.MessageBox.confirm("", txt, function(btn) {            if (!Ext.isEmpty(cb)) {                cb.call(this, btn == "yes");            }        }, s);    },    open: function(s, p) {        s = s || {};        p = p || {};        if(!s.type) {            this.bookmark = this.editor.selection.getBookmark('simple');        }        s.width = parseInt(s.width || 320);        s.height = parseInt(s.height || 240) + (tinymce.isIE ? 8 : 0);        s.min_width = parseInt(s.min_width || 150);        s.min_height = parseInt(s.min_height || 100);        s.max_width = parseInt(s.max_width || 2000);        s.max_height = parseInt(s.max_height || 2000);        s.movable = true;        s.resizable = true;        p.mce_width = s.width;        p.mce_height = s.height;        p.mce_inline = true;        this.features = s;        this.params = p;        var win = Ext.create("Ext.window.Window", {            title: s.name,            width: s.width,            height: s.height,            minWidth: s.min_width,            minHeight: s.min_height,            resizable: true,            maximizable: s.maximizable,            minimizable: s.minimizable,            modal: true,            stateful: false,            constrain: true,            layout: "fit",            items: [                Ext.create("Ext.Component", {                    autoEl: {                        tag: 'iframe',                        src: s.url || s.file                    },                    style : 'border-width: 0px;'                })            ]        });        p.mce_window_id = win.getId();        win.show(null, function() {            if (s.left && s.top)                win.setPagePosition(s.left, s.top);            var pos = win.getPosition();            s.left = pos[0];            s.top = pos[1];            this.onOpen.dispatch(this, s, p);        }, this);        return win;    },    close: function(win) {        // Probably not inline        if (!win.tinyMCEPopup || !win.tinyMCEPopup.id) {            tinymce.WindowManager.prototype.close.call(this, win);            return;        }        var w = Ext.getCmp(win.tinyMCEPopup.id);        if (w) {            this.onClose.dispatch(this);            w.close();        }    },    setTitle: function(win, ti) {        if (!win.tinyMCEPopup || !win.tinyMCEPopup.id) {            tinymce.WindowManager.prototype.setTitle.call(this, win, ti);            return;        }        var w = Ext.getCmp(win.tinyMCEPopup.id);        if (w) w.setTitle(ti);    },    resizeBy: function(dw, dh, id) {        var w = Ext.getCmp(id);        if (w) {            var size = w.getSize();            w.setSize(size.width + dw, size.height + dh);        }    },    focus: function(id) {        var w = Ext.getCmp(id);        if (w) w.setActive(true);    }});Ext.define("EC.common.tinymce.Editor", {    extend:'Ext.form.field.TextArea',    alias: 'widget.TinyMCEEditor',    alternateClassName: 'Ext.form.TinyMCEEditor',	allowBlank: true,	invalidText: "The value in this field is invalid",	invalidClass : 'x-form-invalid',	minLengthText : 'The minimum length for this field is {0}',	maxLengthText : 'The maximum length for this field is {0}',	blankText : 'This field is required',    statics: {        tinyMCEInitialized: false,        //settings for each TinyMCE instance, override before instantiating any TinyMCE editor to change there.        globalSettings: {            theme: "advanced",			plugins: "pagebreak,style,layer,table,advhr,advlink,emotions,iespell,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,noneditable,visualchars,nonbreaking,xhtmlxtras,template,example",			theme_advanced_buttons1: "bold,italic,underline,|,fontsizeselect,|,forecolor,backcolor,|,justifyleft,justifycenter,justifyright,justifyfull,|,link,unlink,|,bullist,numlist,|,hr,removeformat",			theme_advanced_buttons2: "",			theme_advanced_buttons3: "",			theme_advanced_buttons4: "",			theme_advanced_toolbar_location: "top",			theme_advanced_toolbar_align: "left",			theme_advanced_path : false,			theme_advanced_resizing: false,			extended_valid_elements: "a[name|href|target|title|onclick],img[class|src|border=0|alt|title|hspace|vspace|width|height|align|onmouseover|onmouseout|name],hr[class|width|size|noshade],font[face|size|color|style],span[class|align|style],label_query",			setup : function(ed) {							}        },        setGlobalSettings: function(settings) {            Ext.apply(this.globalSettings, settings);        }    },    config: {        height: 300    },    constructor: function(config) {        //override default tinyMCESettings		if(!config.tinyMCESettings)			config.tinyMCESettings = {};		config.tinyMCESettings = Ext.applyIf(config.tinyMCESettings, this.statics().globalSettings);		        this.callParent([config]);        return this;    },    afterRender: function() {        var me = this;        me.callParent(arguments);        me.tinyMCESettings.height = this.height - 11;        me.editor = new tinymce.Editor(this.inputEl.id, this.tinyMCESettings);        me.editor.render();        tinyMCE.add(me.editor);        me.editor.onPostRender.add(Ext.Function.bind(function(editor, controlManager) {            editor.windowManager = Ext.create("EC.common.tinymce.WindowManager", {                editor: this.editor            });						editor.onChange.add(function(ed, l) {				me.validateValue();				me.fireEvent("change", me, l.content);			});			editor.onKeyDown.add(function(ed, e) {				me.fireEvent("keydown", me, e);			});            this.tableEl = Ext.get(this.editor.id + "_tbl");            this.iframeEl = Ext.get(this.editor.id + "_ifr");        }, this));        window.b = me.editor;        me.on('resize', this.onResize, this);    },    getValue: function() {		if(!this.editor || !this.editor.initialized)			return this.rawValue;		else			return this.editor.getContent();    },    setValue: function(val) {        if(this.editor && this.editor.initialized) {			if(val == null)				val = "";            this.editor.setContent(val);        } else {            this.rawValue = val;        }    },    getSubmitData: function() {        var ret = {};        ret[this.getName()] = this.getValue();        return ret;    },    onDestroy: function() {        this.editor.remove();        this.editor.destroy();        this.callParent(arguments);    }        ,onResize : function(component, adjWidth, adjHeight){        var width;        var bodyWidth = component.bodyEl.getWidth();        if (component.iframeEl){            width = bodyWidth - component.iframeEl.getBorderWidth('lr') - 2;            component.iframeEl.setWidth(width);        }        if (component.tableEl){            width = bodyWidth - component.tableEl.getBorderWidth('lr') - 2;            component.tableEl.setWidth(width);        }    },		validateValue: function() {		if(this.editor && this.editor.initialized) {            var value = this.editor.getContent();			if(Ext.isFunction(this.validator)){				var msg = this.validator(value);				if(msg !== true){					this.markInvalid(msg);					return false;				}			}			if(value.length < 1 || value === this.emptyText){ // if it's blank				if(this.allowBlank){					 this.clearInvalid();					 return true;				 }else{					 this.markInvalid(this.blankText);					 return false;				 }			}			if(value.length < this.minLength){				this.markInvalid(String.format(this.minLengthText, this.minLength));				return false;			}			if(value.length > this.maxLength){				this.markInvalid(String.format(this.maxLengthText, this.maxLength));				return false;			}				if(this.vtype){				var vt = Ext.form.VTypes;				if(!vt[this.vtype](value, this)){					this.markInvalid(this.vtypeText || vt[this.vtype +'Text']);					return false;				}			}			if(this.regex && !this.regex.test(value)){				this.markInvalid(this.regexText);				return false;			}			this.clearInvalid();			return true;        }        return true;	},		checkChange: function(){}//tinyMCE does the checking instead});